// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dmvnrm_arma_fast
arma::vec dmvnrm_arma_fast(arma::mat const& x, arma::rowvec const& mean, arma::mat const& sigma, bool const logd);
RcppExport SEXP _simmrcovpackage_dmvnrm_arma_fast(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool const >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrm_arma_fast(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// crossprod
NumericMatrix crossprod(NumericMatrix X);
RcppExport SEXP _simmrcovpackage_crossprod(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(crossprod(X));
    return rcpp_result_gen;
END_RCPP
}
// matmult
NumericMatrix matmult(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _simmrcovpackage_matmult(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(matmult(x, y));
    return rcpp_result_gen;
END_RCPP
}
// rMVNormCpp
NumericMatrix rMVNormCpp(const double n, const arma::vec mu, const NumericMatrix U);
RcppExport SEXP _simmrcovpackage_rMVNormCpp(SEXP nSEXP, SEXP muSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(rMVNormCpp(n, mu, U));
    return rcpp_result_gen;
END_RCPP
}
// solvearma
NumericMatrix solvearma(const NumericMatrix X);
RcppExport SEXP _simmrcovpackage_solvearma(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(solvearma(X));
    return rcpp_result_gen;
END_RCPP
}
// sim_thetacpp
NumericMatrix sim_thetacpp(int S, NumericVector lambda, int n_sources, int n_tracers, int n_cov);
RcppExport SEXP _simmrcovpackage_sim_thetacpp(SEXP SSEXP, SEXP lambdaSEXP, SEXP n_sourcesSEXP, SEXP n_tracersSEXP, SEXP n_covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n_sources(n_sourcesSEXP);
    Rcpp::traits::input_parameter< int >::type n_tracers(n_tracersSEXP);
    Rcpp::traits::input_parameter< int >::type n_cov(n_covSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_thetacpp(S, lambda, n_sources, n_tracers, n_cov));
    return rcpp_result_gen;
END_RCPP
}
// hfn
NumericMatrix hfn(NumericVector theta, int n_sources, int n, int n_cov, NumericMatrix x_scaled);
RcppExport SEXP _simmrcovpackage_hfn(SEXP thetaSEXP, SEXP n_sourcesSEXP, SEXP nSEXP, SEXP n_covSEXP, SEXP x_scaledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type n_sources(n_sourcesSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n_cov(n_covSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_scaled(x_scaledSEXP);
    rcpp_result_gen = Rcpp::wrap(hfn(theta, n_sources, n, n_cov, x_scaled));
    return rcpp_result_gen;
END_RCPP
}
// hcpp
double hcpp(int n_sources, int n_isotopes, int n_covariates, NumericVector beta_prior, NumericMatrix x_scaled, NumericMatrix concentrationmeans, NumericMatrix sourcemeans, NumericMatrix correctionmeans, NumericMatrix corrsds, NumericMatrix sourcesds, NumericVector theta, NumericMatrix y, NumericVector c_0);
RcppExport SEXP _simmrcovpackage_hcpp(SEXP n_sourcesSEXP, SEXP n_isotopesSEXP, SEXP n_covariatesSEXP, SEXP beta_priorSEXP, SEXP x_scaledSEXP, SEXP concentrationmeansSEXP, SEXP sourcemeansSEXP, SEXP correctionmeansSEXP, SEXP corrsdsSEXP, SEXP sourcesdsSEXP, SEXP thetaSEXP, SEXP ySEXP, SEXP c_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_sources(n_sourcesSEXP);
    Rcpp::traits::input_parameter< int >::type n_isotopes(n_isotopesSEXP);
    Rcpp::traits::input_parameter< int >::type n_covariates(n_covariatesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_prior(beta_priorSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_scaled(x_scaledSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type concentrationmeans(concentrationmeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sourcemeans(sourcemeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type correctionmeans(correctionmeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type corrsds(corrsdsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sourcesds(sourcesdsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_0(c_0SEXP);
    rcpp_result_gen = Rcpp::wrap(hcpp(n_sources, n_isotopes, n_covariates, beta_prior, x_scaled, concentrationmeans, sourcemeans, correctionmeans, corrsds, sourcesds, theta, y, c_0));
    return rcpp_result_gen;
END_RCPP
}
// log_q_cpp
double log_q_cpp(NumericVector theta, NumericVector lambda, int n_sources, int n_tracers, int S, int n_covariates);
RcppExport SEXP _simmrcovpackage_log_q_cpp(SEXP thetaSEXP, SEXP lambdaSEXP, SEXP n_sourcesSEXP, SEXP n_tracersSEXP, SEXP SSEXP, SEXP n_covariatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n_sources(n_sourcesSEXP);
    Rcpp::traits::input_parameter< int >::type n_tracers(n_tracersSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type n_covariates(n_covariatesSEXP);
    rcpp_result_gen = Rcpp::wrap(log_q_cpp(theta, lambda, n_sources, n_tracers, S, n_covariates));
    return rcpp_result_gen;
END_RCPP
}
// delta_lqltcpp
NumericVector delta_lqltcpp(NumericVector lambda, NumericVector theta, double eps, int n_sources, int n_tracers, int n_covariates, int S);
RcppExport SEXP _simmrcovpackage_delta_lqltcpp(SEXP lambdaSEXP, SEXP thetaSEXP, SEXP epsSEXP, SEXP n_sourcesSEXP, SEXP n_tracersSEXP, SEXP n_covariatesSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type n_sources(n_sourcesSEXP);
    Rcpp::traits::input_parameter< int >::type n_tracers(n_tracersSEXP);
    Rcpp::traits::input_parameter< int >::type n_covariates(n_covariatesSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(delta_lqltcpp(lambda, theta, eps, n_sources, n_tracers, n_covariates, S));
    return rcpp_result_gen;
END_RCPP
}
// h_lambdacpp
double h_lambdacpp(int n_sources, int n_isotopes, NumericVector beta_prior, int n_covariates, int S, NumericMatrix concentrationmeans, NumericMatrix sourcemeans, NumericMatrix correctionmeans, NumericMatrix corrsds, NumericMatrix sourcesds, NumericVector theta, NumericMatrix y, NumericVector lambda, NumericMatrix x_scaled, NumericVector c_0);
RcppExport SEXP _simmrcovpackage_h_lambdacpp(SEXP n_sourcesSEXP, SEXP n_isotopesSEXP, SEXP beta_priorSEXP, SEXP n_covariatesSEXP, SEXP SSEXP, SEXP concentrationmeansSEXP, SEXP sourcemeansSEXP, SEXP correctionmeansSEXP, SEXP corrsdsSEXP, SEXP sourcesdsSEXP, SEXP thetaSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP x_scaledSEXP, SEXP c_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_sources(n_sourcesSEXP);
    Rcpp::traits::input_parameter< int >::type n_isotopes(n_isotopesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_prior(beta_priorSEXP);
    Rcpp::traits::input_parameter< int >::type n_covariates(n_covariatesSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type concentrationmeans(concentrationmeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sourcemeans(sourcemeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type correctionmeans(correctionmeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type corrsds(corrsdsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sourcesds(sourcesdsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_scaled(x_scaledSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_0(c_0SEXP);
    rcpp_result_gen = Rcpp::wrap(h_lambdacpp(n_sources, n_isotopes, beta_prior, n_covariates, S, concentrationmeans, sourcemeans, correctionmeans, corrsds, sourcesds, theta, y, lambda, x_scaled, c_0));
    return rcpp_result_gen;
END_RCPP
}
// cov_mat_cpp
NumericMatrix cov_mat_cpp(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _simmrcovpackage_cov_mat_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cov_mat_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// nabla_LB_cpp
NumericVector nabla_LB_cpp(NumericVector lambda, NumericMatrix theta, int n_sources, int n_tracers, NumericVector beta_prior, int S, int n_covariates, NumericMatrix x_scaled, NumericMatrix concentrationmeans, NumericMatrix sourcemeans, NumericMatrix correctionmeans, NumericMatrix corrsds, NumericMatrix sourcesds, NumericMatrix y, NumericVector c, NumericVector c_0);
RcppExport SEXP _simmrcovpackage_nabla_LB_cpp(SEXP lambdaSEXP, SEXP thetaSEXP, SEXP n_sourcesSEXP, SEXP n_tracersSEXP, SEXP beta_priorSEXP, SEXP SSEXP, SEXP n_covariatesSEXP, SEXP x_scaledSEXP, SEXP concentrationmeansSEXP, SEXP sourcemeansSEXP, SEXP correctionmeansSEXP, SEXP corrsdsSEXP, SEXP sourcesdsSEXP, SEXP ySEXP, SEXP cSEXP, SEXP c_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type n_sources(n_sourcesSEXP);
    Rcpp::traits::input_parameter< int >::type n_tracers(n_tracersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_prior(beta_priorSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type n_covariates(n_covariatesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_scaled(x_scaledSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type concentrationmeans(concentrationmeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sourcemeans(sourcemeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type correctionmeans(correctionmeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type corrsds(corrsdsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sourcesds(sourcesdsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_0(c_0SEXP);
    rcpp_result_gen = Rcpp::wrap(nabla_LB_cpp(lambda, theta, n_sources, n_tracers, beta_prior, S, n_covariates, x_scaled, concentrationmeans, sourcemeans, correctionmeans, corrsds, sourcesds, y, c, c_0));
    return rcpp_result_gen;
END_RCPP
}
// control_var_cpp
NumericVector control_var_cpp(NumericVector lambda, NumericMatrix theta, int n_sources, int n_tracers, NumericVector beta_prior, int n_covariates, NumericMatrix x_scaled, NumericMatrix concentrationmeans, NumericMatrix sourcemeans, NumericMatrix correctionmeans, NumericMatrix corrsds, NumericMatrix sourcesds, NumericMatrix y, NumericVector c_0);
RcppExport SEXP _simmrcovpackage_control_var_cpp(SEXP lambdaSEXP, SEXP thetaSEXP, SEXP n_sourcesSEXP, SEXP n_tracersSEXP, SEXP beta_priorSEXP, SEXP n_covariatesSEXP, SEXP x_scaledSEXP, SEXP concentrationmeansSEXP, SEXP sourcemeansSEXP, SEXP correctionmeansSEXP, SEXP corrsdsSEXP, SEXP sourcesdsSEXP, SEXP ySEXP, SEXP c_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type n_sources(n_sourcesSEXP);
    Rcpp::traits::input_parameter< int >::type n_tracers(n_tracersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_prior(beta_priorSEXP);
    Rcpp::traits::input_parameter< int >::type n_covariates(n_covariatesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_scaled(x_scaledSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type concentrationmeans(concentrationmeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sourcemeans(sourcemeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type correctionmeans(correctionmeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type corrsds(corrsdsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sourcesds(sourcesdsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_0(c_0SEXP);
    rcpp_result_gen = Rcpp::wrap(control_var_cpp(lambda, theta, n_sources, n_tracers, beta_prior, n_covariates, x_scaled, concentrationmeans, sourcemeans, correctionmeans, corrsds, sourcesds, y, c_0));
    return rcpp_result_gen;
END_RCPP
}
// LB_lambda_cpp
double LB_lambda_cpp(NumericMatrix theta, NumericVector lambda, NumericVector p, int n_sources, int n_isotopes, NumericVector beta_prior, int n_covariates, NumericMatrix x_scaled, NumericMatrix concentrationmeans, NumericMatrix sourcemeans, NumericMatrix correctionmeans, NumericMatrix corrsds, NumericMatrix sourcesds, NumericMatrix y, NumericVector c_0);
RcppExport SEXP _simmrcovpackage_LB_lambda_cpp(SEXP thetaSEXP, SEXP lambdaSEXP, SEXP pSEXP, SEXP n_sourcesSEXP, SEXP n_isotopesSEXP, SEXP beta_priorSEXP, SEXP n_covariatesSEXP, SEXP x_scaledSEXP, SEXP concentrationmeansSEXP, SEXP sourcemeansSEXP, SEXP correctionmeansSEXP, SEXP corrsdsSEXP, SEXP sourcesdsSEXP, SEXP ySEXP, SEXP c_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n_sources(n_sourcesSEXP);
    Rcpp::traits::input_parameter< int >::type n_isotopes(n_isotopesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_prior(beta_priorSEXP);
    Rcpp::traits::input_parameter< int >::type n_covariates(n_covariatesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_scaled(x_scaledSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type concentrationmeans(concentrationmeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sourcemeans(sourcemeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type correctionmeans(correctionmeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type corrsds(corrsdsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sourcesds(sourcesdsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_0(c_0SEXP);
    rcpp_result_gen = Rcpp::wrap(LB_lambda_cpp(theta, lambda, p, n_sources, n_isotopes, beta_prior, n_covariates, x_scaled, concentrationmeans, sourcemeans, correctionmeans, corrsds, sourcesds, y, c_0));
    return rcpp_result_gen;
END_RCPP
}
// run_VB_cpp
NumericVector run_VB_cpp(NumericVector lambdastart, int n_sources, int n_tracers, int n_covariates, int n, NumericVector beta_prior, NumericMatrix concentrationmeans, NumericMatrix sourcemeans, NumericMatrix correctionmeans, NumericMatrix corrsds, NumericMatrix sourcesds, NumericMatrix y, NumericMatrix x_scaled, int S, int P, double beta_1, double beta_2, int tau, double eps_0, int t_W, NumericVector c_prior);
RcppExport SEXP _simmrcovpackage_run_VB_cpp(SEXP lambdastartSEXP, SEXP n_sourcesSEXP, SEXP n_tracersSEXP, SEXP n_covariatesSEXP, SEXP nSEXP, SEXP beta_priorSEXP, SEXP concentrationmeansSEXP, SEXP sourcemeansSEXP, SEXP correctionmeansSEXP, SEXP corrsdsSEXP, SEXP sourcesdsSEXP, SEXP ySEXP, SEXP x_scaledSEXP, SEXP SSEXP, SEXP PSEXP, SEXP beta_1SEXP, SEXP beta_2SEXP, SEXP tauSEXP, SEXP eps_0SEXP, SEXP t_WSEXP, SEXP c_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambdastart(lambdastartSEXP);
    Rcpp::traits::input_parameter< int >::type n_sources(n_sourcesSEXP);
    Rcpp::traits::input_parameter< int >::type n_tracers(n_tracersSEXP);
    Rcpp::traits::input_parameter< int >::type n_covariates(n_covariatesSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_prior(beta_priorSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type concentrationmeans(concentrationmeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sourcemeans(sourcemeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type correctionmeans(correctionmeansSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type corrsds(corrsdsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sourcesds(sourcesdsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_scaled(x_scaledSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type beta_1(beta_1SEXP);
    Rcpp::traits::input_parameter< double >::type beta_2(beta_2SEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type eps_0(eps_0SEXP);
    Rcpp::traits::input_parameter< int >::type t_W(t_WSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_prior(c_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(run_VB_cpp(lambdastart, n_sources, n_tracers, n_covariates, n, beta_prior, concentrationmeans, sourcemeans, correctionmeans, corrsds, sourcesds, y, x_scaled, S, P, beta_1, beta_2, tau, eps_0, t_W, c_prior));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simmrcovpackage_dmvnrm_arma_fast", (DL_FUNC) &_simmrcovpackage_dmvnrm_arma_fast, 4},
    {"_simmrcovpackage_crossprod", (DL_FUNC) &_simmrcovpackage_crossprod, 1},
    {"_simmrcovpackage_matmult", (DL_FUNC) &_simmrcovpackage_matmult, 2},
    {"_simmrcovpackage_rMVNormCpp", (DL_FUNC) &_simmrcovpackage_rMVNormCpp, 3},
    {"_simmrcovpackage_solvearma", (DL_FUNC) &_simmrcovpackage_solvearma, 1},
    {"_simmrcovpackage_sim_thetacpp", (DL_FUNC) &_simmrcovpackage_sim_thetacpp, 5},
    {"_simmrcovpackage_hfn", (DL_FUNC) &_simmrcovpackage_hfn, 5},
    {"_simmrcovpackage_hcpp", (DL_FUNC) &_simmrcovpackage_hcpp, 13},
    {"_simmrcovpackage_log_q_cpp", (DL_FUNC) &_simmrcovpackage_log_q_cpp, 6},
    {"_simmrcovpackage_delta_lqltcpp", (DL_FUNC) &_simmrcovpackage_delta_lqltcpp, 7},
    {"_simmrcovpackage_h_lambdacpp", (DL_FUNC) &_simmrcovpackage_h_lambdacpp, 15},
    {"_simmrcovpackage_cov_mat_cpp", (DL_FUNC) &_simmrcovpackage_cov_mat_cpp, 2},
    {"_simmrcovpackage_nabla_LB_cpp", (DL_FUNC) &_simmrcovpackage_nabla_LB_cpp, 16},
    {"_simmrcovpackage_control_var_cpp", (DL_FUNC) &_simmrcovpackage_control_var_cpp, 14},
    {"_simmrcovpackage_LB_lambda_cpp", (DL_FUNC) &_simmrcovpackage_LB_lambda_cpp, 15},
    {"_simmrcovpackage_run_VB_cpp", (DL_FUNC) &_simmrcovpackage_run_VB_cpp, 21},
    {NULL, NULL, 0}
};

RcppExport void R_init_simmrcovpackage(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
